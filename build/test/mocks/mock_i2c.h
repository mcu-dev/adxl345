/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_I2C_H
#define _MOCK_I2C_H

#include "unity.h"
#include "i2c.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_i2c_Init(void);
void mock_i2c_Destroy(void);
void mock_i2c_Verify(void);




#define i2c_init_IgnoreAndReturn(cmock_retval) i2c_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2c_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define i2c_init_StopIgnore() i2c_init_CMockStopIgnore()
void i2c_init_CMockStopIgnore(void);
#define i2c_init_ExpectAndReturn(cmock_retval) i2c_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void i2c_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
typedef _Bool (* CMOCK_i2c_init_CALLBACK)(int cmock_num_calls);
void i2c_init_AddCallback(CMOCK_i2c_init_CALLBACK Callback);
void i2c_init_Stub(CMOCK_i2c_init_CALLBACK Callback);
#define i2c_init_StubWithCallback i2c_init_Stub
#define i2c_write_bytes_IgnoreAndReturn(cmock_retval) i2c_write_bytes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2c_write_bytes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int8_t cmock_to_return);
#define i2c_write_bytes_StopIgnore() i2c_write_bytes_CMockStopIgnore()
void i2c_write_bytes_CMockStopIgnore(void);
#define i2c_write_bytes_ExpectAndReturn(dev_addr, data_buffer, cmock_retval) i2c_write_bytes_CMockExpectAndReturn(__LINE__, dev_addr, data_buffer, cmock_retval)
void i2c_write_bytes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t dev_addr, uint8_t* data_buffer, int8_t cmock_to_return);
typedef int8_t (* CMOCK_i2c_write_bytes_CALLBACK)(uint8_t dev_addr, uint8_t* data_buffer, int cmock_num_calls);
void i2c_write_bytes_AddCallback(CMOCK_i2c_write_bytes_CALLBACK Callback);
void i2c_write_bytes_Stub(CMOCK_i2c_write_bytes_CALLBACK Callback);
#define i2c_write_bytes_StubWithCallback i2c_write_bytes_Stub
#define i2c_write_bytes_ExpectWithArrayAndReturn(dev_addr, data_buffer, data_buffer_Depth, cmock_retval) i2c_write_bytes_CMockExpectWithArrayAndReturn(__LINE__, dev_addr, data_buffer, data_buffer_Depth, cmock_retval)
void i2c_write_bytes_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t dev_addr, uint8_t* data_buffer, int data_buffer_Depth, int8_t cmock_to_return);
#define i2c_write_bytes_ReturnThruPtr_data_buffer(data_buffer) i2c_write_bytes_CMockReturnMemThruPtr_data_buffer(__LINE__, data_buffer, sizeof(uint8_t))
#define i2c_write_bytes_ReturnArrayThruPtr_data_buffer(data_buffer, cmock_len) i2c_write_bytes_CMockReturnMemThruPtr_data_buffer(__LINE__, data_buffer, cmock_len * sizeof(*data_buffer))
#define i2c_write_bytes_ReturnMemThruPtr_data_buffer(data_buffer, cmock_size) i2c_write_bytes_CMockReturnMemThruPtr_data_buffer(__LINE__, data_buffer, cmock_size)
void i2c_write_bytes_CMockReturnMemThruPtr_data_buffer(UNITY_LINE_TYPE cmock_line, uint8_t* data_buffer, size_t cmock_size);
#define i2c_write_bytes_IgnoreArg_dev_addr() i2c_write_bytes_CMockIgnoreArg_dev_addr(__LINE__)
void i2c_write_bytes_CMockIgnoreArg_dev_addr(UNITY_LINE_TYPE cmock_line);
#define i2c_write_bytes_IgnoreArg_data_buffer() i2c_write_bytes_CMockIgnoreArg_data_buffer(__LINE__)
void i2c_write_bytes_CMockIgnoreArg_data_buffer(UNITY_LINE_TYPE cmock_line);
#define i2c_read_byte_IgnoreAndReturn(cmock_retval) i2c_read_byte_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2c_read_byte_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int8_t cmock_to_return);
#define i2c_read_byte_StopIgnore() i2c_read_byte_CMockStopIgnore()
void i2c_read_byte_CMockStopIgnore(void);
#define i2c_read_byte_ExpectAndReturn(dev_addr, data_read_virtual_address, read_data, cmock_retval) i2c_read_byte_CMockExpectAndReturn(__LINE__, dev_addr, data_read_virtual_address, read_data, cmock_retval)
void i2c_read_byte_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t dev_addr, uint8_t data_read_virtual_address, uint8_t* read_data, int8_t cmock_to_return);
typedef int8_t (* CMOCK_i2c_read_byte_CALLBACK)(uint8_t dev_addr, uint8_t data_read_virtual_address, uint8_t* read_data, int cmock_num_calls);
void i2c_read_byte_AddCallback(CMOCK_i2c_read_byte_CALLBACK Callback);
void i2c_read_byte_Stub(CMOCK_i2c_read_byte_CALLBACK Callback);
#define i2c_read_byte_StubWithCallback i2c_read_byte_Stub
#define i2c_read_byte_ExpectWithArrayAndReturn(dev_addr, data_read_virtual_address, read_data, read_data_Depth, cmock_retval) i2c_read_byte_CMockExpectWithArrayAndReturn(__LINE__, dev_addr, data_read_virtual_address, read_data, read_data_Depth, cmock_retval)
void i2c_read_byte_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t dev_addr, uint8_t data_read_virtual_address, uint8_t* read_data, int read_data_Depth, int8_t cmock_to_return);
#define i2c_read_byte_ReturnThruPtr_read_data(read_data) i2c_read_byte_CMockReturnMemThruPtr_read_data(__LINE__, read_data, sizeof(uint8_t))
#define i2c_read_byte_ReturnArrayThruPtr_read_data(read_data, cmock_len) i2c_read_byte_CMockReturnMemThruPtr_read_data(__LINE__, read_data, cmock_len * sizeof(*read_data))
#define i2c_read_byte_ReturnMemThruPtr_read_data(read_data, cmock_size) i2c_read_byte_CMockReturnMemThruPtr_read_data(__LINE__, read_data, cmock_size)
void i2c_read_byte_CMockReturnMemThruPtr_read_data(UNITY_LINE_TYPE cmock_line, uint8_t* read_data, size_t cmock_size);
#define i2c_read_byte_IgnoreArg_dev_addr() i2c_read_byte_CMockIgnoreArg_dev_addr(__LINE__)
void i2c_read_byte_CMockIgnoreArg_dev_addr(UNITY_LINE_TYPE cmock_line);
#define i2c_read_byte_IgnoreArg_data_read_virtual_address() i2c_read_byte_CMockIgnoreArg_data_read_virtual_address(__LINE__)
void i2c_read_byte_CMockIgnoreArg_data_read_virtual_address(UNITY_LINE_TYPE cmock_line);
#define i2c_read_byte_IgnoreArg_read_data() i2c_read_byte_CMockIgnoreArg_read_data(__LINE__)
void i2c_read_byte_CMockIgnoreArg_read_data(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
